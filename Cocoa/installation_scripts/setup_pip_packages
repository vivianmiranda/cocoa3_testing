if [ -z "${ROOTDIR}" ]; then
    echo 'ERROR ROOTDIR not defined'
    return 1
fi
if [ -z "${CXX_COMPILER}" ]; then
    echo 'ERROR CXX_COMPILER not defined'
    return 1
fi
if [ -z "${C_COMPILER}" ]; then
    echo 'ERROR C_COMPILER not defined'
    return 1
fi
if [ -z "${PIP3}" ]; then
    echo 'ERROR PIP3 not defined'
    return 1
fi
if [ -z "${PYTHON3}" ]; then
    echo 'ERROR PIP3 not defined'
    return 1
fi

echo 'INSTALLING PYTHON PACKAGES VIA PIP - THAT MIGHT TAKE A WHILE'

if [ -z "${IGNORE_ALL_PIP_INSTALLATION}" ]; then
  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    cd $ROOTDIR/../cocoa_installation_libraries/expat241
    
    FC=$FORTRAN_COMPILER CC=$C_COMPILER ./configure --prefix=$ROOTDIR/.local \
    --enable-shared=yes --enable-static=yes > /dev/null 2> /dev/null

    make -j $MAKE_NUM_THREADS > /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
      echo "LIBEXPAT MAKE INSTALL RUN DONE"
    else
      echo "LIBEXPAT COULD NOT RUN MAKE INSTALL" >&2
      return 1
    fi

    make install > /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
      echo "LIBEXPAT MAKE INSTALL RUN DONE"
    else
      echo "LIBEXPAT COULD NOT RUN MAKE INSTALL" >&2
      return 1
    fi

   cp $ROOTDIR/.local/lib/libexpat.so.1 $ROOTDIR/.local/lib/libexpat.so.0
   cd $ROOTDIR
  fi
fi

# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------
# -------------------------- PIP required packages ---------------------------
# ----------------------------------------------------------------------------
# ----------------------------------------------------------------------------

if [ -z "${IGNORE_ALL_PIP_INSTALLATION}" ]; then
  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install setuptools \
      --prefix=$ROOTDIR/.local \
      --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
      --no-index > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
      echo "PROBLEM PIP setuptools"
      return 1
    fi
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install six \
    --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP six"
    return 1
  fi

  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install \
    $ROOTDIR/../cocoa_installation_libraries/pip_cache/wheel-0.40.0.tar.gz \
    --prefix=$ROOTDIR/.local --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
      echo "PROBLEM PIP wheel"
      return 1
    fi
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install wget --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP wget"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install packaging --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null 
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP packaging"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install \
    $ROOTDIR/../cocoa_installation_libraries/pip_cache/PGen-0.2.1.zip  --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP PGen"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install appdirs --prefix=$ROOTDIR/.local \
    --find-links  file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP appdirs"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'tokenizers==0.10.3' --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP tokenizers"
    return 1
  fi

  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'cython==0.29.24' \
      --prefix=$ROOTDIR/.local --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
      --no-index > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
      echo "PROBLEM PIP Cython"
      return 1
    fi
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install requests --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP requests"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install urllib3 --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP urllib3"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install chardet --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP chardet"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install pyparsing --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP pyparsing"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install certifi --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP certifi"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install idna --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP idna"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install python-dateutil --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP python-dateutil"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install pytz --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP pytz"
    return 1
  fi

  #PS: --force-reinstall install numpy on $ROOTDIR/.local - this helps CARMA to see numpy files
  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'numpy==1.21.4' --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache --no-index \
    --force-reinstall > /dev/null 2> /dev/null

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install mpmath --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP mpmath"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'PyYAML==6.0' --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP PyYAML"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install fuzzywuzzy --prefix=$ROOTDIR/.local  \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null 
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP fuzzywuzzy"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install cycler --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP cycler"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install kiwisolver --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP kiwisolver"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install pillow --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP pillow"
    return 1
  fi
  
  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install pybind11 --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP pybind11"
    return 1
  fi
  
  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install pythran --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP pythran"
    return 1
  fi
  
  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'scipy==1.7.2' --prefix=$ROOTDIR/.local \
      --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
      --no-index > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
      echo "PROBLEM PIP scipy"
      return 1
    fi
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'sympy==1.10.1' --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP sympy"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'imageio==2.19.3' --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP imageio"
    return 1
  fi

  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'pandas==1.3.4' --prefix=$ROOTDIR/.local \
      --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
      --no-index > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
      echo "PROBLEM PIP pandas"
      return 1
    fi
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install ordered_set --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP ordered_set"
    return 1
  fi

  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'mpi4py==3.1.2' --prefix=$ROOTDIR/.local \
      --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
      --no-index > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
      echo "PROBLEM PIP mpi4py"
      return 1
    fi
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'py-bobyqa==1.3' --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP py-bobyqa"
    return 1
  fi

  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'matplotlib==3.5.1' --prefix=$ROOTDIR/.local \
      --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
      --no-index > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
      echo "PROBLEM PIP matplotlib"
      return 1
    fi

    env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'astropy==4.3.1' --prefix=$ROOTDIR/.local \
      --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
      --no-index > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then
      echo "PROBLEM PIP astropy"
      return 1
    fi
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'GetDist==1.3.4' --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP GetDist"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'sacc==0.8.1' --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP sacc"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'iminuit==2.12.1' --prefix=$ROOTDIR/.local \
    --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP iminuit"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install \
    $ROOTDIR/../cocoa_installation_libraries/pip_cache/fgspectra --prefix=$ROOTDIR/.local \
    --no-index > /dev/null 2> /dev/null 
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP fgspectra"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install \
    $ROOTDIR/../cocoa_installation_libraries/pip_cache/syslibrary --prefix=$ROOTDIR/.local \
    --no-index > /dev/null 2> /dev/null  
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP syslibrary"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER  $PIP3 install --global-option=build_ext \
    $ROOTDIR/../cocoa_installation_libraries/euclidemu2-1.2.0 --no-dependencies \
    --prefix=$ROOTDIR/.local --no-index > /dev/null 2> /dev/null  
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP euclidemul"
    return 1
  fi

  env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'lenstronomy==1.11.2' \
    --prefix=$ROOTDIR/.local --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
    --no-index > /dev/null 2> /dev/null
  if [ $? -ne 0 ]; then
    echo "PROBLEM PIP lenstronomy"
    return 1
  fi

  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    if [ -z "${IGNORE_EMULATOR_CPU_PIP_PACKAGES}" ]; then
      # ------------------------------------------------------------------------
      # ------------------------------------------------------------------------
      # THE EMULATOR PACKAGES WILL REQUIRE INTERNET ACCESS (too large even for GIT-LFS)
      # ------------------------------------------------------------------------
      # ------------------------------------------------------------------------
      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'tensorflow-cpu==2.8.0' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP tensorflow"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'keras==2.8.0' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP keras"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'keras-preprocessing==1.1.2' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP keras-preprocessing"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'keras-preprocessing==1.1.2' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP keras-preprocessing"
        return 1
      fi
      
      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'torch==1.11.0+cpu' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP torch"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'torchvision==0.12.0+cpu' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP torchvision"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'gpy==1.10' --prefix=$ROOTDIR/.local \
        --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
        --no-index > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP gpy"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'pyDOE2==1.2.1' --prefix=$ROOTDIR/.local \
        --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
        --no-index > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP pyDOE2"
        return 1
      fi
    fi
  fi

  if [ -z "${MINICONDA_INSTALLATION}" ]; then
    if [ -z "${IGNORE_EMULATOR_GPU_PIP_PACKAGES}" ]; then
      # ------------------------------------------------------------------------
      # ------------------------------------------------------------------------
      # THE EMULATOR PACKAGES WILL REQUIRE INTERNET ACCESS (too large even for GIT-LFS)
      # ------------------------------------------------------------------------
      # ------------------------------------------------------------------------
      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'tensorflow==2.8.0' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP tensorflow-gpu"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'keras==2.8.0' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP keras"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'keras-preprocessing==1.1.2' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP keras-preprocessing"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'keras-preprocessing==1.1.2' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP keras-preprocessing"
        return 1
      fi
      
      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'torch==1.11.0' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP torch-gpu"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'torchvision==0.12.0+cpu' \
        --prefix=$ROOTDIR/.local > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP torchvision"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'gpy==1.10' --prefix=$ROOTDIR/.local \
        --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
        --no-index > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP gpy"
        return 1
      fi

      env CXX=$CXX_COMPILER CC=$C_COMPILER $PIP3 install 'pyDOE2==1.2.1' --prefix=$ROOTDIR/.local \
        --find-links file:$ROOTDIR/../cocoa_installation_libraries/pip_cache \
        --no-index > /dev/null 2> /dev/null
      if [ $? -ne 0 ]; then
        echo "PROBLEM PIP pyDOE2"
        return 1
      fi
    fi
  fi

fi

# PS: --no-index option prevent pip from using internet (forces to use our local cache)