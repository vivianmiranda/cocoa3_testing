Diogo Henrique Francis de Souza, IFT-UNESP
Creation of this document: November 20, 2021

Description: My modifications to implement scalar field - quintessence
-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------


/------------------/
/November 20, 2021 /
/------------------/

1- model.f90 -> declare which_potential, potentialparameter1, and potentialparameter2 [line 150, 151]

2- camb.f90 -> introduce the lines
P%which_potential     = Ini%Read_Double('potential_type')        [line 421]       
P%potentialparameter1 = Ini%Read_Double('potential_parameter_1') [line 422]
P%potentialparameter2 = Ini%Read_Double('potential_parameter_2') [line 423]

3- camb.f90 -> correcting a typo: changing DarkEneryModel to DarkEnergyModel. Missing letter "g" in original camb

2- included potentialparameter1, potentialparameter2, and potential_type in dark_energy.py -> class EarlyQuintessence.

/------------------/
/November 22, 2021 /
/------------------/

|------|
|Task 1|- make which_potential to be read from the inifile. Follow the stepes 
|------|

1- ../CAMB/camb/model.py -> class CAMBparams(F2003Class) -> _fields_ -> introduce the lines
("which_potential",c_int,"quintessence potential type")  [line 194]
("potentialparameter1",c_double,"potential parameter 1") [line 195]
("potentialparameter2",c_double,"potential parameter 2") [line 196]

2- ../CAMB/camb/model.py -> def set_cosmology -> introduce the line (I'm setting Peebles Ratra as the standard potential)
which_potential=4, potentialparameter1=2.50474e-117, potentialparameter2=6.0 [line 410] 

3a- ../CAMB/camb/camb.py -> def set_params_cosmomc -> pars.set_cosmology -> introduce the line [line 236]
which_potential=p['potentialtype'], potentialparameter1=p['teoryparameter1'], potentialparameter2=p['teoryparameter2']
3b- ../CAMB/build/lib/camb/camb.py ->  def set_params_cosmomc -> pars.set_cosmology -> introduce the line [line 236]
which_potential=p['potentialtype'], potentialparameter1=p['teoryparameter1'], potentialparameter2=p['teoryparameter2']

4- Deleted all previous steps for potentialparameter1 and potentialparameter2 

/------------------/
/November 23, 2021 /
/------------------/

|------|
|Task 1|- make potentialparameter1 and potentialparameter2 to be read from the inifile. 
|------|

1- fortran/model.f90 -> declare potentialparameter1, and potentialparameter2 [lines 152, 153]
2- fortran/model.f90 -> validate potentialparameter1, and potentialparameter2 [lines: 365 to 374]
3- fortran/camb.f90 -> read potentialparameter1, and potentialparameter2 from inifile [lines: 422, 423]
obs: which_potential is an INTEGER !! so do step 4
4- fortran/camb.f90 -> correcting from Ini%Read_Double('which_potential') to Ini%Read_Int('which_potential') [line 421]
5- camb/model.py -> class CAMBparams(F2003Class)-> _fields_-> declare potentialparameter1 [line 195](same for potentialparameter2)
6- camb/model.py -> def set_cosmology -> potentialparameter1=2.50474e-117,potentialparameter2=6.0 [line 410]
7- camb/model.py -> self.potentialparameter1 = potentialparameter1 [line 499] (same for potentialparameter2)
8- camb/camb.py -> pars.set_cosmology -> potentialparameter1=p['myparameter1(2)'] [lines 235] (same for potentialparameter2)
obs- step 8 seems optional

Status of the task 1- done
Conclusion -It is working!-

|------|
|Task 2|- make jupyter notebook work for CAMB-quintessence
|------|

Overwrite the files
1- cp  ../CAMB-test/code/CAMB/fortran/DarkEnergyQuintessence.f90 ../CAMB-quintessence/code/CAMB/fortran 
2- cp ../CAMB-test/code/CAMB/fortran/results.f90 ../CAMB-quintessence/code/CAMB/fortran
3- cp ../CAMB-test/code/CAMB/fortran/model.f90 ../CAMB-quintessence/code/CAMB/fortran
4- cp ../CAMB-test/code/CAMB/fortran/camb.f90 ../CAMB-quintessence/code/CAMB/fortran
5- cp ../CAMB-test/code/CAMB/camb/model.py ../CAMB-quintessence/code/CAMB/camb

Status of the task 2- done
Conclusion- It is working!


/------------------/
/November 25, 2021 /
/------------------/

|------|
|Task 1|- define(i), compute(ii) and save(iii) the results for fcdm, fbaryon, fphoton fmasslessNu, fmassiveNu, where
|------|

fcdm:        ration of cold dark matter energy density to the total
fbaryon:     ration of baryons             ||
fphoton:     ration of photons             ||
fmasslessNu: ration of massless neutrinos  ||
fmassiveNu:  ration of massive neutrinos   ||
obs: fde (ration of dark energy) is already defined from the original camb.

(i) To define, follow the steps

1- results.f90 -> define new procedures -> grho_cdm, grho_baryon, grho_masslessNu, grho_massiveNu [line 264]
2- results.f90 -> define new function for each of the above procedurs [from line 1172 to 1227]
For example, for grho_cdm my procude is: 
function grho_cdm(this,a) result(grhoa2) [from line 1174]
!DHFS: return 8*pi*G*rho_cdm*a**4 where rho_cdm includes only cdm 
    class(CAMBdata) :: this
    real(dl), intent(in)  :: a 
    real(dl) grhoa2

    grhoa2 = this%grhoc * a
end function grho_cdm                    [to line 1181]

(ii) and (iii) To compute and save, keep following the steps (simple approach)

3- DarkEnergyQuintessence.f90 -> subroutine TEarlyQuintessence_Init -> define the background quantities
real(dl) :: fcdm, fbaryon, fphoton, fmasslessNu, fmassiveNu, cambH [line 438]
where cambH is the Hubble parameter
4- DarkEnergyQuintessence.f90 -> subroutine TEarlyQuintessence_Init -> compute each background quantity:
For example, for the fcdm:
fcdm = this%state%grho_cdm(sampled_a(ix))/(this%state%grho_no_de(sampled_a(ix)) & [line 496]
    + a2*(0.5d0* phidot_a(ix)**2 + a2*this%Vofphi(y(1),0)))

5- make the same for the other components [from line 499 to 520] 

comment:
{
BEGINS headache: SOLVING THE BUG "the kernel appears to have died"
I found the cause of a bug that made my jupyter notebook not work.
Here is the reason: in DarkEnergyQuintessence.f90 I was introducing the OPEN(), WRITE(), and CLOSE()
statements at the START, the MIDDLE and at the END, respectively, of the do loop to save sampled_a(ix), phi_a(ix),
phidot_a(ix), and fde(ix) -see the subroutine TEarlyQuintessence_Init-. If we keep these things there, then when we try to
run the jupyter notebook I was getting the following message error from the jupyter notebook:
"the kernel appears to have died. it will restart automatically" and ONLY this!.
Therefore, after a lot of changes in my code was impossible to find the reason of this message error.
To correct this what I did was: I made a copy of the original CAMB (cp CAMB-original CAMB-test). So I remade ALL of my
implementations and, most important, for EACH re-implementation I ran the jupyter notebook to see if the kernel would die.
After to do all of this staff I DON'T found the error -frustrating-. Today, accidentally, doing some daily tests, I found
that this is the reason of the bug. 
Inserting OPEN(), WRITE(), and CLOSE() statements DON'T cause any error when running CAMB from terminal, but this kills the
kernel when ran the jupyter notebook.   
ENDS headache: SOLVING THE BUG "the kernel appears to have died"
}

|-------|
|Task 2a|- introduce a logical parameter to decide if we want binary search or not
|Task 2b|- make the logical parameter want_binary_search to be read from the inifile
|-------|

1- model.f90 -> declare want_binary_search -> logical :: want_binary_search  = .true. [line 143]
2- model.f90 -> print a warning if want_binary_search = false
if (this%want_binary_search .and. (this%potentialparameter1<0._dl .or. this%potentialparameter1>100._dl)) then
    OK = .false.
    write(*,*) '  Warning: if binary search = false then you must provide a physically acceptable &
                    value for potentential parameter 1', &
                    'binary search decision:',this%want_binary_search,&
                    'potential parameter 1', this%potentialparameter1
end if    
3- camb.f90  -> read the parameter want_binary_search from the inifile
P%want_binary_search = Ini%Read_Logical('want_binary_search') [line 424] 
4- model.py -> 
4a- ("want_binary_search",c_bool,"deciding if we want to do binary search on potential parameter 1 or not") [line 198]
4b- set_cosmology -> want_binary_search=True [line 413]
4c- self.want_binary_search = want_binary_search [line 504]

Status of the task- done!
Conclusion- it is working

/------------------/
/November 26, 2021 /
/------------------/

|------|
|Task 1|- introduce an IF condition in DarkEnergyQuintessence.f90 to automatically decide if we want binary search or not  
|------|

1- DarkEnergyQuintessence.f90 -> TEarlyQuintessence_Init add the following lines
if (this%state%CP%want_binary_search) then
    V0_min = 1e-127_dl   ! DHFS: Assumed to be in Mpl^4
    V0_max = 1e-110_dl   ! DHFS: Assumed to be in Mpl^4
    call BinarySearchInV0(this, State, astart, atol, V0_min, V0_max, initial_phi)
else 
    this%potentialparameter1 = this%state%CP%potentialparameter1    
end if

2- DarkEnergyQuintessence.f90 -> TEarlyQuintessence_VofPhi -> COMMENT or DELET the potentialparameter1 attribution
! this%potentialparameter1 = this%state%CP%potentialparameter1 [or delet this line. line 277]

comment:
{
step 2 is supper important to binary search work correctly. If this line is not commetend or deleted then the
potentialparameter1 from the inifile is mixed with the potentialparameter1 of the BinarySearchInV0 subroutine. This is
of course a logical error, therefore our code will run but not work!. 
I will probably forget about this in the future, so I prefer to delete this line.
} 


/------------------/
/November 30, 2021 /
/------------------/

|-------|
|Task 1a|- Change the name of the class from TEarlyQuintessence to TLateQuintessence  
|-------|  

1- In the terminal pass the command -> grep -R --color "TEarlyQuintessence"
The files containg this string are:

1a- fortran/DarkEnergyQuintessence.f90
1b- fortran/camb.f90
1c- camb/dark_energy.py
1d- lib/camb/dark_energy.py

2- Open each of this files and change the name.

Status of the task 1a - done!

|-------|
|Task 1b|- Change ALL word with "EarlyQuintessence" to "LateQuintessence"                     
|-------| 

1- In the terminal pass the command -> grep -R --color "EarlyQuintessence"
The files containg this string are:  

1a- fortran/DarkEnergyQuintessence.f90 (done)
1b- build/lib/camb/tests/camb_test.py  (done)
1c- build/lib/camb/dark_energy.py      (done)
1d- camb/tests/camb_test.py            (done)
1e- camb/dark_energy.py                (done)
1f- docs/CAMBdemo.ipynb                (*)
1g- docs/source/dark_energy.rst        (done)
1h- docs/quintessence-tests.ipynb      (done)
1i- docs/CAMBdemo.html                 (*)

(*)(I'll not change - this are the standard collection of jupyter examples from the original code)

2- Go to EACH of this files and change the name.

Status of the task 1b - done!
It is working when ran from terminal (params_quintessence.ini) and from jupyter notebook (quintessence-tests.ipynb) !!!


/------------------/
/December 01, 2021 /
/------------------/

tests to use my camb at Grid Unesp

Alguns ajustes previous

1- DarkEnergyQuintessence.f90 -> added the line integer :: which_potential [line 58]
2- dark_energy.py -> added the line ("which_potential",c_int) [line 172]
3- dark_energy.py -> added the line self.which_potential = which_potential [line 184] 
depois dos passos 1, 2, e 3 eu testei o camb no terminal e pelo jupyter notebook -> both are working.

Iniciando processo de instalar o camb no grid 

4- copiei todo o conteúdo (exceto o diretório build - aparentemente esse diretório não é necessário
para o funcionamento do camb no grid) de home/DiogoHenrique/CAMB-quintessence/code/CAMB para o
diretório /home/DiogoHenrique/CAMB-to-grid
5- scp -r CAMB-to-grid diogohf@access2.grid.unesp.br:
5a- [putting camb in the right directory] -> mv CAMB-to-grid /home/diogohf/myCAMB/code 
5b- [rename camb to make cobaya understand the camb] 
5b1- -> mv CAMB CAMB-other-name [where CAMB WAS the installed CAMB]
5b2- -> mv CAMB-to-grid CAMB [now CAMB-to-grid IS now the installed CAMB]
(actually steps 5b are workaround !! I need to see a best way
 to do cobaya watch the actuall camb without change the name)
6a- cd /home/diogohf
6b- conda activate cobaya-env2
6c- module load miniconda/3
6d- module load gcc/10.2.3
7- cd /home/diogohf/myCAMB/code/CAMB
8- pip install -e . [you can stop here, but if you want to try run CAMB, then do step 9]
9a- cd fortran/
9b- make clean [just to relieving the conscience]
9c- make
9d- ./camb /path-to-your-inifile/your-params.ini 

status of my camb at grid: it is installed and working!!






--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------

Task- introduce a logical parameter to decide if we want or not write the outputs for the:
sampled_a, phi_a, phidot_a, fde, fcdm, fbaryon, fphotons, fmasslessNu, fmassiveNu, and cambH




   